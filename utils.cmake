
cmake_minimum_required(VERSION 3.4.0)

function(CHECK_VAR_FILE FILE_VAR)
    if(NOT ${FILE_VAR})
        message(WARNING "${FILE_VAR} was not set")
        set(${FILE_VAR}-VALID FALSE PARENT_SCOPE)
        return()
    endif()
    IS_PARAM(CREATE ${ARGV})
    if (CREATE)
        get_filename_component(FILE_VAR_TXT ${${FILE_VAR}} ABSOLUTE)
        set (${FILE_VAR}-REALPATH ${FILE_VAR_TXT} PARENT_SCOPE)
        message(STATUS "${FILE_VAR}=${FILE_VAR_TXT} will be created")
        return()
    endif()
    set(FILE ${${FILE_VAR}})
    get_filename_component(FILE_PATH ${FILE} ABSOLUTE)
    #	message(WARNING "Checking ${FILE_VAR} = ${FILE}")
    if(EXISTS "${FILE_PATH}")
        set(${FILE_VAR}-VALID TRUE PARENT_SCOPE)
        set (${FILE_VAR}-REALPATH ${FILE_PATH} PARENT_SCOPE)
    else()
        message(WARNING "${FILE} was not found")
        set(${FILE_VAR}-VALID FALSE PARENT_SCOPE)
    endif()
endfunction()

function(IS_NUMBER VAR)
    if (NOT VAR)
        return()
    endif()
    string(STRIP "${${VAR}}" ${VAR}_PARSED)
    if(${VAR}_PARSED MATCHES "^[0-9]+$")
#        message(STATUS "${VAR} = ${${VAR}} is numeric")
        set(${VAR}-IS_NUMBER TRUE PARENT_SCOPE)
#    else()
#        message(STATUS "${VAR} = ${${VAR}} is not numeric")
    endif()
endfunction()


function(IS_PARAM PARAM)
    LIST(SUBLIST ARGV 1 -1 VAR_LIST)
#    message("VAR_LIST: ${VAR_LIST}")
    if (${PARAM} IN_LIST VAR_LIST)
        message(STATUS "Found ${PARAM} in ${VAR_LIST}")
        set(${PARAM} TRUE PARENT_SCOPE)
        return()
    endif()
#message(STATUS "${PARAM} NOT found in ${VAR_LIST}")

endfunction()

function(EXTRACT_PARAM PARAM)
    LIST(SUBLIST ARGV 1 -1 VAR_LIST)
    list(LENGTH VAR_LIST VAR_COUNT)

    math(EXPR lastIndex "${VAR_COUNT}-1")
    #    message("VAR_LIST = ${${VAR_LIST}}")
    #    message("VAR_COUNT = ${VAR_COUNT}")
    #    message("lastIndex = ${lastIndex}")
    #    message("lastIndex = ${lastIndex}")
    foreach(index RANGE 0 ${lastIndex})
        MATH(EXPR val_index "${index}+1")
        list(GET VAR_LIST ${index} VAR)
        #        message("VAR=${VAR} in ${index}")
        #        message("arguments at index ${index}: ${${VAR_LIST${index}}} val_index ${val_index}")
        if ("${VAR}" STREQUAL "${PARAM}" AND ${val_index} LESS_EQUAL ${lastIndex})
            list(GET VAR_LIST ${val_index} VALUE)
            set(${PARAM} ${VALUE} PARENT_SCOPE)
            message(STATUS "Found ${PARAM} = ${${PARAM}} (${VALUE})")
            return()
        else()
            continue()
        endif()
    endforeach()
endfunction()


